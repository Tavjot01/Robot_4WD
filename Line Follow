

// PWM testing for backward & forward grp motors
//Forward (Max, Min) Range = (255,0)
//Backward (Max, Min) Range = (0,255)
/*#include <avr/io.h>
#include <util/delay.h>

int main(void){
	DDRD |= 0b01110100;			// Pin 2, 4 , 5 and 6 as Output pins for motors 1,2,3,4. // Both forward and backward pins initialized to ouptut
	PORTD ^= 0b01000100;			// Running Pin 6 (Right Motors) in forward direction and Pin 2(Left motors) in backward direction
	speedControl(120,180);			// Applying PWM on both the motors. Right motors at high speed and Left motors at low speed


} 
void speedControl(int dutycycle_Grp1, int dutyCycle_Grp2){

TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); 		// set fast PWM mode with non-inverting output for OC0A and OC0B
TCCR0B |= (1 << CS02); 								// set prescaler to 256

// Duty cycle for right motors
OCR0A = dutycycle_Grp1; 							// set duty cycle for PD6 // AT for constant Speed M3 & M4

// Duty cycle for left motors
OCR0B = dutyCycle_Grp2; 							// set duty cycle for PD5 // AT for Constant Speed M2 & M1
}
*/




// Line Following Algorithm

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0b01110100; 									// setting all motors pin as Output -  Both Forward and Backwards pin
	// DDRD |= (1 << PD5) | (1 << PD6) ; // set PD5 and PD6 as output pins
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); 			// set fast PWM mode with non-inverting output for OC0A and OC0B
	TCCR0B |= (1 << CS02);									// set prescaler to 256

	while (1)
	{
		// Read sensor values - Black = 1 , White = 0
		int left = (PINB & (1 << PB3)) ? 1 : 0;						// Input sensed value from Left sensor at Pin 11 in Port B		
		int center = (PIND & (1 << PD7)) ? 1 : 0;					// Input sensed value from center sensor at Pin 7 in Port D
		int right = (PINB & (1 << PB0)) ? 1 : 0 ; 					// Input sensed value from right sensor at Pin 8 in Port B

		if ((left) && (center) && (right))						// When robot is on the track line, All leds black
		{
			// On the line - go straight
			PORTD = 0b01100000; 							// Both the motors in forward direction
			OCR0A = 105;								// Duty cycle M3 & M4 
			OCR0B = 105;								// Duty cycle M2 & M1
		}
		else if ((!left) && (center) && (right)) // Slight Right Turn			// When robot is going slight left off track, Left == 0
		{
			PORTD = 0b00110000; 							// Left motors in forward direction, Right motors in backward direction
			OCR0A = 180;								// Backward right side duty cycle
			OCR0B = 115;								// Forward left side duty cycle , less difference between both grp tyres
		}
		else if ((!left) && (!center) && (right))	// Sharp Right Turn             // When robot is going sharp left off track, Left == 0 and center == 0
		{
			PORTD = 0b00110000; // set right side forward				// Left motors in forward direction, Right motors in backward direction
			OCR0A = 160;		//Backward right side				// Backward right side duty cycle
			OCR0B = 135;		//Forward left side				// Forward left side duty cycle, large difference between both grp tyres
		}
		else if ((left) && (center) && (!right)) // Slight left Turn			// When robot is going slight right off track, Right == 0
		{
			PORTD = 0b01000100; 							// Right motors in forward direction, Left motors in backward direction
			OCR0A = 115;								// Forward right side duty cycle
			OCR0B = 180;	   							// Backward left side duty cycle
		}
		else if ((left) && (!center) && (!right))	// Sharp Right Turn		// When robot is going sharp right off track, Right == 0 and center == 0
		{
			PORTD = 0b01000100; // set right side forward				// Right motors in forward direction, Left motors in backward direction
			OCR0A = 135;								// Forward right side duty cycle
			OCR0B = 160;	   							// Backward left side duty cycle
		}
		else if((!left) && (!center) && (!right))					// When on white surface stop completely
		{
			// Lost the line - stop
			PORTD = 0b00000000; // set both motors to stop
			OCR0A = 0;
			OCR0B = 0;
		}
	}
	return 0;
}
