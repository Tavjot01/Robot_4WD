
# Accepted code till date 13 March 18:06pm
# Motor values turning and accepted, forward movement tends to go on right side maybe due to motor fault




#define F_CPU 16000000UL
#define BAUD 9600
#include <avr/io.h>
#include <util/setbaud.h>
#include <util/delay.h>
#include <avr/interrupt.h>
char input_Command;
uint16_t distance, A1, A2, length();
uint16_t flag;
int timer = 0;
void Avoid(void);
void procedure(int angleDeviation);
int main(void)
{
	TCCR1B = (1 << CS12);// Set Pre scalar as 256
	UBRR0H = UBRRH_VALUE;
	UBRR0L = UBRRL_VALUE;
	UCSR0B |= (1<<RXEN0) | (1 << RXCIE0);// Enable transmission
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);// Set frame to 8 bits
	DDRD = 0b01110100;
	DDRB =0b000010010;
	DDRC = (1 << PC3);
	procedure(90);
	_delay_ms(600);
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); // set fast PWM mode with non-inverting output for OC0A and OC0B
	TCCR0B |= (1 << CS02); // set prescaler to 256
	sei();
	while (1)
	{
		if (input_Command == 'F'){
			PORTB = 0b00000010; // Turn on LED
			Avoid();
		}
		else if(input_Command == 'B'){
			PORTB = 0b00000000; // Turn off LED
			PORTD = 0b00000000;
			OCR0A = 0;
			OCR0B = 0;
		}
}
	}
ISR(USART_RX_vect) {
	input_Command = UDR0;
	}
void Avoid(void){
	flag = 1;
	while(flag){
		distance = length();
		if (input_Command == 'B'){
			flag = 0;
			break;
		}
		if ((distance < 15) && (distance != 0))
		{
			PORTD = 0b00000000;
			OCR0A = 0;
			OCR0B = 0;
			//_delay_ms(30);
			procedure(160);
			_delay_ms(20);
			A1 = length();
			//_delay_ms(20);
			procedure(20);
			_delay_ms(20);
			A2 = distance;
			//_delay_ms(20);
			procedure(90);
			if (A1 > A2)
			{
				//PORTB = 0b00000010;
				PORTD = 0b01000100;
				OCR0A = 90;
				OCR0B = 100;
				procedure(90);
				_delay_ms(150);
				}else{
				PORTD = 0b00110000;
				OCR0A = 220;
				OCR0B = 100;
				procedure(90);
				_delay_ms(150);
			}
			}else{
			PORTD = 0b01100000;
			OCR0A = 60;
			OCR0B = 60;
		}
	}
}
uint16_t length(){
	// Send trigger pulse
	PORTB |= (1 << PB4); // Set PB5 high
	_delay_us(10); // Wait 10us
	PORTB &= ~(1 << PB4); // Set PB5 low
	// Measure echo pulse duration
	uint16_t pulse_width = 0;
	while ((PINB & (1 << PB5)) == 0); // Wait for echo pulse start
	while ((PINB & (1 << PB5)) != 0) // Measure pulse width
	{
		pulse_width++;
		_delay_us(1);
	}
	// Calculate distance in cm
	uint16_t distance = (pulse_width / 2)/29.1;
	return distance;
	//_delay_ms(100); // Wait for 100ms before next measurement
	}
void procedure(int angleDeviation) {
	for (int i = 0;i < 90;i++){
		long pulseWidth = (angleDeviation * 11) + 500; // Calculation for value of pulse width
		PORTC = 0b00001000;
		for(int i = 0; i < pulseWidth; i++){
		}
		//_delay_us(pulseWidth)
		PORTC = 0b00000000;
		for(int j = 0; j < (20-pulseWidth/1000); j++){
		}
	}//_delay_ms((20-pulseWidth/1000));
